{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","selectedParameter","setSelectedParameter","useState","results","setResults","parametersList","Array","from","Set","data","map","item","Parameter","sort","React","createElement","className","src","alt","htmlFor","id","value","onChange","e","target","param","index","key","onClick","handleSearch","filteredResults","filter","length","message","result","Tech","Matrix1","Preservative","Temp","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"i4lFA8EeA,MA1Ef,WACE,MAAOC,EAAmBC,GAAwBC,mBAAS,KACpDC,EAASC,GAAcF,mBAAS,IAGjCG,EAAiBC,MAAMC,KAAK,IAAIC,IAAIC,EAAKC,IAAIC,GAAQA,EAAKC,aAAaC,OAa7E,OACEC,IAAAC,cAAA,OAAKC,UAAU,OAEbF,IAAAC,cAAA,OAAKC,UAAU,kBACdF,IAAAC,cAAA,OAAKE,IAAI,gBAAgBC,IAAI,eAAeF,UAAU,kBAGvDF,IAAAC,cAAA,UAAI,6BAGJD,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAOI,QAAQ,qBAAoB,wBACnCL,IAAAC,cAAA,UACEK,GAAG,oBACHC,MAAOrB,EACPsB,SAAWC,GAAMtB,EAAqBsB,EAAEC,OAAOH,QAE/CP,IAAAC,cAAA,UAAQM,MAAM,IAAG,sBAChBhB,EAAeK,IAAI,CAACe,EAAOC,IAC1BZ,IAAAC,cAAA,UAAQY,IAAKD,EAAOL,MAAOI,GAAQA,KAGvCX,IAAAC,cAAA,UAAQa,QAhCOC,KAEnB,MAAMC,EAAkBrB,EAAKsB,OAAOpB,GAAQA,EAAKC,YAAcZ,GAC3D8B,EAAgBE,OAAS,EAC3B5B,EAAW0B,GAEX1B,EAAW,CAAC,CAAE6B,QAAS,2CA0BU,WAIjCnB,IAAAC,cAAA,OAAKK,GAAG,WACLjB,EAAQ6B,OAAS,EAChB7B,EAAQO,IAAI,CAACwB,EAAQR,IACnBZ,IAAAC,cAAA,OAAKY,IAAKD,EAAOV,UAAU,eACzBF,IAAAC,cAAA,UAAKmB,EAAOtB,WACZE,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,SAAc,IAAEmB,EAAOC,MAClCrB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,YAAiB,IAAEmB,EAAOE,SACrCtB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,yBAA8B,IAAEmB,EAAO,yBAClDpB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,iBAAsB,IAAEmB,EAAO,iBAC1CpB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,uBAA4B,IAAEmB,EAAO,gBAChDpB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,gBAAqB,IAAEmB,EAAO,gBACzCpB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,iBAAsB,IAAEmB,EAAOG,cAC1CvB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,gBAAqB,IAAEmB,EAAOI,MACzCxB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,iBAAsB,IAAEmB,EAAO,iBAC1CpB,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,uBAA4B,IAAEmB,EAAO,yBAIpDpB,IAAAC,cAAA,SAAIZ,EAAQ6B,OAAS,EAAI,GAAK,qBAKlClB,IAAAC,cAAA,cACED,IAAAC,cAAA,SAAG,gDC5DIwB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAnB,EAAA,GAAAoB,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCADW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzC,IAAAC,cAACD,IAAM0C,WAAU,KACf1C,IAAAC,cAAChB,EAAG,QAKRwC","file":"static/js/main.30d847b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport data from './data.json'; // Importing data.json\r\n\r\nfunction App() {\r\n  const [selectedParameter, setSelectedParameter] = useState('');\r\n  const [results, setResults] = useState([]);\r\n\r\n  // Get unique parameters from the data, then sort them alphabetically\r\n  const parametersList = Array.from(new Set(data.map(item => item.Parameter))).sort(); // Sort the parameters alphabetically\r\n\r\n  // Function to handle the search when the button is clicked\r\n  const handleSearch = () => {\r\n    // Filter the data based on the selected parameter\r\n    const filteredResults = data.filter(item => item.Parameter === selectedParameter);\r\n    if (filteredResults.length > 0) {\r\n      setResults(filteredResults); // Update the results state with the filtered data\r\n    } else {\r\n      setResults([{ message: 'No results found for this parameter' }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Company Logo */}\r\n      <div className=\"logo-container\">\r\n       <img src=\"/img/logo.jpg\" alt=\"Company Logo\" className=\"company-logo\" />\r\n      </div>\r\n\r\n      <h1>Preservation Guide Search</h1>\r\n\r\n      {/* Dropdown Menu */}\r\n      <div>\r\n        <label htmlFor=\"parameterDropdown\">Select a parameter: </label>\r\n        <select\r\n          id=\"parameterDropdown\"\r\n          value={selectedParameter}\r\n          onChange={(e) => setSelectedParameter(e.target.value)}\r\n        >\r\n          <option value=\"\">Choose a parameter</option>\r\n          {parametersList.map((param, index) => (\r\n            <option key={index} value={param}>{param}</option>\r\n          ))}\r\n        </select>\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n\r\n      {/* Results Section */}\r\n      <div id=\"results\">\r\n        {results.length > 0 ? (\r\n          results.map((result, index) => (\r\n            <div key={index} className=\"result-item\">\r\n              <h3>{result.Parameter}</h3>\r\n              <p><strong>Tech:</strong> {result.Tech}</p>\r\n              <p><strong>Matrix1:</strong> {result.Matrix1}</p>\r\n              <p><strong>EPA Approved Method2:</strong> {result[\"EPA Approved Method2\"]}</p>\r\n              <p><strong>SW846 Method:</strong> {result[\"SW846 Method\"]}</p>\r\n              <p><strong>Recommended Volume:</strong> {result[\"Rec. Volume\"]}</p>\r\n              <p><strong>Bottle Type:</strong> {result[\"Bottle Type\"]}</p>\r\n              <p><strong>Preservative:</strong> {result.Preservative}</p>\r\n              <p><strong>Temperature:</strong> {result.Temp}</p>\r\n              <p><strong>Holding Time:</strong> {result[\"Holding Time\"]}</p>\r\n              <p><strong>Holding Time Units:</strong> {result[\"Holding Time Units\"]}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>{results.length > 0 ? \"\" : \"No results found\"}</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Footer with Company Name and Tagline */}\r\n      <footer>\r\n        <p>Â© Shield Environmental Associates 2024</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client'; // Import from 'react-dom/client'\r\nimport './index.css';  // Your CSS file (if you have one)\r\nimport App from './App'; // Import your main component (App)\r\nimport reportWebVitals from './reportWebVitals'; // Optional for web vitals\r\n\r\n// Create the root and render the App component inside the div with id \"root\"\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// Optional: You can track web vitals if needed\r\nreportWebVitals();\r\n"],"sourceRoot":""}